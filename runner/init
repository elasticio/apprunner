#!/bin/bash
set -eo pipefail

SAILOR_PATH_NODEJS="./node_modules/sailor/run.js"

## Load slug from Bind Mount, URL or STDIN

echo "Starting application in apprunner"
echo "Slug URL is set to : ${SLUG_URL}"

export HOME=/app
mkdir -p $HOME

if [[ $(ls -A $HOME) ]]; then
	true
elif [[ $SLUG_URL ]]; then
	echo "Downloading slug..."
	curl -L -s "$SLUG_URL" | tar -xzC $HOME
	echo "Successfully downloaded and extracted slug file"
	unset SLUG_URL
else
	echo "No SLUG_URL was set, will try to read from stdin"
	cat | tar -xzC $HOME
fi
cd $HOME

## Load profile.d and release config

shopt -s nullglob
mkdir -p .profile.d
if [[ -s .elasticio_sailor ]]; then
	ruby -e "require 'yaml';(YAML.load_file('.elasticio_sailor')['config_vars'] || {}).each{|k,v| puts \"#{k}='#{v}'\"}" > .profile.d/env_vars
fi
for file in .profile.d/*; do
	source $file
done
hash -r

## Inject "start" command to run processes defined in Procfile

case "$1" in
	start)
		if [[ -f Procfile ]]; then
			command="$(ruby -e "require 'yaml';puts YAML.load_file('Procfile')['$2']")"
		else
			command="$(ruby -e "require 'yaml';puts (YAML.load_file('.release')['default_process_types'] || {})['$2']")"
		fi
		;;
	sailor)
		if [[ -f $SAILOR_PATH_NODEJS ]]; then
			command="node $SAILOR_PATH_NODEJS"
		else
			echo "Can't find sailor executor"
			exit 1
		fi
		;;
	*)
		command="$@"
		;;
esac

## Use sdutil to register with service discovery

if [[ $SD_NAME && $PORT ]]; then
	if [[ $SD_HOST ]]; then
		runner="sdutil exec -h $SD_HOST -s $SD_NAME:$PORT bash -c"
		unset SD_HOST
	else
		runner="sdutil exec -s $SD_NAME:$PORT bash -c"
	fi
	unset SD_NAME
elif [[ $SD_ARGS ]]; then
	runner="sdutil $SD_ARGS bash -c"
	unset SD_ARGS
else
	runner="bash -c"
fi

## Run!
echo "Starting the application with ${runner} ${command}"
exec $runner "$command"
