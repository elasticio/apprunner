#!/bin/bash
set -eo pipefail

echo "Starting application in apprunner"

export HOME=/app
mkdir -p $HOME

## Load slug from Bind Mount, URL or STDIN
if [[ $(ls -A $HOME) ]]; then
	echo "Will try to start app at ${HOME}"
	true
elif [[ $SLUG_URL ]]; then
	echo "Starting slug download ..."
	curl -L -s --connect-timeout 60 "$SLUG_URL" | tar --absolute-names -xzC $HOME
	echo "Successfully downloaded and extracted slug file"
	unset SLUG_URL
else
	echo "No SLUG_URL was set, will try to read from stdin"
	cat | tar -xzC $HOME
fi
cd $HOME

## Load profile.d and release config

shopt -s nullglob
mkdir -p .profile.d
if [[ -s .release ]]; then
	echo "Writing config vars to .profile.d/config_vars"
	ruby -e "require 'yaml';(YAML.load_file('.release')['config_vars'] || {}).each{|k,v| puts \"#{k}=\${#{k}:-'#{v}'}\"}" > .profile.d/config_vars
fi

if [[ -s .elasticio_sailor ]]; then
    	echo "Writing config vars to .profile.d/env_vars"
	ruby -e "require 'yaml';(YAML.load_file('.elasticio_sailor')['config_vars'] || {}).each{|k,v| puts \"export #{k}='#{v}'\"}" > .profile.d/env_vars
fi

for file in .profile.d/*; do
	source $file
done

hash -r

## Inject "start" command to run processes defined in Procfile

case "$1" in
	start)
		if [[ -f Procfile ]]; then
			command="$(ruby -e "require 'yaml';puts YAML.load_file('Procfile')['$2']")"
		else
			command="$(ruby -e "require 'yaml';puts (YAML.load_file('.release')['default_process_types'] || {})['$2']")"
		fi
		;;
	*)
		command="$@"
		;;
esac

## Run!
export command
exec "/runner/command.sh"
